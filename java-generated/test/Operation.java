package test;
import com.sun.jna.Structure;
/**
 * <i>native declaration : line 26</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class Operation extends Structure {
	/**
	 * @see Optype<br>
	 * C type : Optype
	 */
	public int op_type;
	/// C type : Opinst
	public Opinst op;
	public Operation() {
		super();
		initFieldOrder();
	}
	protected void initFieldOrder() {
		setFieldOrder(new String[]{"op_type", "op"});
	}
	/**
	 * @param op_type @see Optype<br>
	 * C type : Optype<br>
	 * @param op C type : Opinst
	 */
	public Operation(int op_type, Opinst op) {
		super();
		this.op_type = op_type;
		this.op = op;
		initFieldOrder();
	}
	public static class ByReference extends Operation implements Structure.ByReference {
		
	};
	public static class ByValue extends Operation implements Structure.ByValue {
		
	};
}
